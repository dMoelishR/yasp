{"name":"Yasp","tagline":"YASP: Another Stats Page.  Open source Dota 2 replay parsing and statistics","body":"YASP - YASP: Another Stats Page\r\n====\r\n[![Build Status](https://travis-ci.org/yasp-dota/yasp.svg)](https://travis-ci.org/yasp-dota/yasp)\r\n[![Code Climate](https://codeclimate.com/github/yasp-dota/yasp/badges/gpa.svg)](https://codeclimate.com/github/yasp-dota/yasp)\r\n[![Coverage Status](https://coveralls.io/repos/yasp-dota/yasp/badge.svg)](https://coveralls.io/r/yasp-dota/yasp)\r\n[![Dependency Status](https://david-dm.org/yasp-dota/yasp.svg)](https://david-dm.org/yasp-dota/yasp)\r\n[![devDependency Status](https://david-dm.org/yasp-dota/yasp/dev-status.svg)](https://david-dm.org/yasp-dota/yasp#info=devDependencies)\r\n[![Join the chat at https://gitter.im/yasp-dota/yasp](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/yasp-dota/yasp?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n[![Stories in Ready](https://badge.waffle.io/yasp-dota/yasp.svg?label=ready&title=Ready)](http://waffle.io/yasp-dota/yasp)\r\n\r\nFeatures\r\n----\r\n* Replay Parsing: Parses replays of Dota 2 matches to provide additional statistics per match.\r\n  * Item build times\r\n  * Pick order\r\n  * Number of pings\r\n  * Stun/disable time\r\n  * Consumables bought\r\n  * Runes picked up\r\n  * Laning position heatmap\r\n  * Ward placement map\r\n  * LHs per min table\r\n  * Radiant advantage/Gold/XP/LH graphs per min\r\n  * Teamfight summary\r\n  * Objective times\r\n  * Largest hit on a hero\r\n  * Ability uses/hits\r\n  * Item uses\r\n  * Gold/XP breakdown\r\n  * Damage/Kills crosstables\r\n  * Multikills/Kill streaks\r\n  * All chat\r\n* Advanced Querying: Supports flexible querying and aggregation with the following criteria:\r\n  * Player(s) in game (account ID)\r\n  * Team composition (heroes)\r\n  * Opponent composition (heroes)\r\n  * Standard filters: patch, game mode, hero, etc.\r\n* Aggregations:\r\n  * Result count, win rate\r\n  * Win rate by hour/day of week\r\n  * Histogram (number of matches across Duration, LH, HD, TD, K, D, A, etc.)\r\n  * Hero Matchups (win rate when playing as, with, against a hero)\r\n  * Teammates/Opponents (win rate playing with/against particular players)\r\n  * Max/N/Sum on multiple stat categories\r\n  * Mean item build times\r\n  * Skill accuracy\r\n  * Laning\r\n  * Ward maps\r\n  * Word clouds (text said and read in all chat)\r\n* Pro Games: See the latest professional matches (automatically parsed)\r\n* Live matches: (Under construction)\r\n* Comparison Tool: Compare players to each other and compute a percentile against all YASP users\r\n* Rating Tracker: Keep track of MMR by adding a Steam account as a friend\r\n* Modular: YASP is built with a microservice architecture, with pieces that can be reused in other projects\r\n* Scalable: Designed to scale to thousands of users.\r\n* Free: YASP puts no features behind paywalls.  All data is available for free to users.\r\n* Open Source: YASP encourages contributions from the Dota 2 developer community.\r\n\r\nTech\r\n----\r\n* Web: Node.js/Express\r\n* Storage: MongoDB/Redis\r\n* Parser: Java (powered by [clarity](https://github.com/skadistats/clarity))\r\n\r\nStarting YASP\r\n----\r\n* Install dependencies.  If on Debian/Ubuntu: `sudo bash init.sh`  Otherwise, you're responsible for figuring out how to install dependencies yourself.\r\n* Create .env file with required config values in KEY=VALUE format (see config.js) `touch .env`\r\n* Build `npm run build`\r\n* Launch in dev mode (this will run under nodemon so file changes automatically restart YASP): `npm run dev`.  Alternatively launch in regular mode: `npm start`\r\n* The full list of services can be found in the Procfile.  You can run individual microservices using Foreman: `nf start {process name}`.  However, they will all try to start on port 5000 when run individually, so you may need to pass the `-p` argument to set the port explicitly.\r\n* Developers: If you want to make changes to client side JS, you will want to run the watch script `npm run watch` in order to automatically rebuild after making changes.\r\n* Tests: Tests are run with the Mocha framework.  `npm test` to run the full test suite.\r\n\r\nSample Data\r\n----\r\n* Load the test players and matches: `mongo dota migrations/loader.js`\r\n* https://github.com/yasp-dota/testfiles/blob/master/dota.zip contains a database dump that can be imported using mongorestore if a larger data set is desired.\r\n\r\nLessons and Rules\r\n----\r\n* Never async.parallel database calls.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}